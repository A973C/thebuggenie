#!/usr/bin/php
<?php

	// Set the path to The Bug Genie top folder
	define ('THEBUGGENIE_PATH', realpath(getcwd() . DIRECTORY_SEPARATOR) . DIRECTORY_SEPARATOR);

	try
	{
		// Include the "engine" script, which initializes and sets up stuff
		require THEBUGGENIE_PATH . 'core/tbg_engine.inc.php';
	}
	catch (Exception $e)
	{
		TBGCliCommand::cli_echo('An error occured when trying to initialize the command line client:', 'white', 'bold');
		echo "\n";
		TBGCliCommand::cli_echo($e->getMessage(), 'red', 'bold');
		echo "\n";
		die();
	}

	$core_commands = array();
	$event = TBGEvent::createNew('cli', 'core_commands', null, array(), $core_commands);
	$event->trigger();

	/*

	$core_commands['help'] = array('command' => 'help', 'params' => '', 'optional' => false, 'description' => "\tDisplays this output and exits", 'help' => 'This command displays a list of available commands, and a brief description of what each command does.');
	$core_commands['explain'] = array('command' => 'explain', 'params' => 'command', 'description' => "Explains any <command> in more detail", 'help' => "If you didn't know what this command does, how would you be reading this?");
	$core_commands['license'] = array('command' => 'license', 'params' => 'print', 'optional' => true, 'description' => "Gives more information the bug genie license", 'help' => 'This command prints the complete license for you to read. Enjoy!');
	$core_commands['upgrade'] = array('command' => 'upgrade', 'params' => '', 'description' => "Launches the upgrade wizard", 'help' => "Launches the upgrade wizard");

	*/
	
	if (!file_exists('installed'))
	{
		$core_commands['install'] = array('command' => 'install', 'params' => '', 'description' => "Launches the installation wizard", 'help' => "Launches the installation wizard");
	}
	else
	{
		$module_commands = array();
		
		foreach (TBGContext::getModules() as $aModule)
		{
			foreach ($aModule->getAvailableCommandLineCommands() as $aCommand)
			{
				$module_commands[$aModule->getName()][$aCommand['command']] = $aCommand;
			}
		}
	}
	
	if ($argc < 2 || in_array($argv[1], array('help', '--help', '-help', '-h', '-?')))
	{
		echo "The Bug Genie command line tool\n";
		TBGCliCommand::cli_echo("Usage: ", 'black', 'bold') . $argv[0] . ' [' . TBGCliCommand::cli_echo('command', 'green', 'bold') . "]\n";
		if ($argc > 1 && in_array($argv[1], array('help', '--help', '-help', '-h', '-?')))
		{
			echo "\n";
			foreach ($core_commands as $aCommand)
			{
				TBGCliCommand::cli_echo($aCommand['command'], 'green', 'bold') . ' ';
				echo "\t" . $aCommand['description'] . "\n";
			}
			echo "\n";
			if (isset($module_commands))
			{
				echo "Available module commands: (invoked by using " . TBGCliCommand::cli_echo('module_name:command', 'green', 'bold') . ")\n";
				$cc = 0;
				foreach ($module_commands as $module => $commands)
				{
					echo "\n";
					TBGCliCommand::cli_echo("{$module}:\n", 'green', 'bold');
					foreach ($commands as $command)
					{
						TBGCliCommand::cli_echo($command['command'], 'green', 'bold') . ' ';
						echo "\t" . $command['description'] . "\n";
						$cc++;
					}
					if (empty($commands))
					{
						echo "This module does not have any commands\n";
					}
					echo "\n";
				}
				if ($cc == 0)
				{
					echo "There are no module commands\n\n";
				}
			}
		}
		else
		{
			echo "\nType " . $argv[0] . ' ' . TBGCliCommand::cli_echo('help', 'green', 'bold') . "\033[0m for more information.\n";
		}
	}
	else
	{
		switch ($argv[1])
		{
			case "explain":
				if (isset($argv[2]))
				{
					$tmpvar = explode(':', $argv[2]);
					if (isset($core_commands[$argv[2]]))
					{
						echo "\n";
						TBGCliCommand::cli_echo('Usage: ', 'black', 'bold') . $argv[0];
						echo ' ' . TBGCliCommand::cli_echo($core_commands[$argv[2]]['command'], 'green', 'bold') . ' ';
						echo ($core_commands[$argv[2]]['optional']) ? '[' : '';
						TBGCliCommand::cli_echo($core_commands[$argv[2]]['params'], 'magenta', '');
						echo ($core_commands[$argv[2]]['optional']) ? ']' : '';
						echo "\n";
						echo $core_commands[$argv[2]]['help'];
						echo "\n\n";
					}
					elseif (is_array($tmpvar) && isset($module_commands[$tmpvar[0]]) && isset($module_commands[$tmpvar[0]][$tmpvar[1]]))
					{
						echo "\n";
						TBGCliCommand::cli_echo('Usage: ', 'black', 'bold') . $argv[0];
						echo ' ' . TBGCliCommand::cli_echo($module_commands[$tmpvar[0]][$tmpvar[1]]['command'], 'green', 'bold') . ' ';
						echo (array_key_exists('optional', $module_commands[$tmpvar[0]][$tmpvar[1]])) ? '[' : '';
						TBGCliCommand::cli_echo($module_commands[$tmpvar[0]][$tmpvar[1]]['params'], 'magenta', '');
						echo (array_key_exists('optional', $module_commands[$tmpvar[0]][$tmpvar[1]])) ? ']' : '';
						echo "\n";
						echo $module_commands[$tmpvar[0]][$tmpvar[1]]['help'];
						echo "\n\n";
					}
					else
					{
						TBGCliCommand::cli_echo('That command is unknown. I can\'t explain it.', 'red', '') . "\n";
						return false;
					}
				}
				else
				{
					TBGCliCommand::cli_echo('Please tell me what to explain.', 'red', '') . "\n";
					return false;
				}
				break;
			case "license":
				if ($argv[2] == 'print')
				{
					$thelicense = file_get_contents('LICENSE.TXT');
					echo $thelicense . "\n";
				}
				else
				{
					echo 'The Bug Genie is released under the MPL 1.1 only. You can read the license at: ' . "\n";
					TBGCliCommand::cli_echo('http://www.opensource.org/licenses/mozilla1.1.php', 'blue', 'underline') . '.';
					echo "\n\n" . 'To print the license, type: ' . $argv[0] . TBGCliCommand::cli_echo(' license', 'green', 'bold') . TBGCliCommand::cli_echo(' print', 'magenta', '');
					echo "\n\nResistance is futile.\n\n";
				}
				break;
			case "upgrade":
				echo "Upgrading is not implemented from command line yet\n";
				break;
			case "install":
				TBGCliCommand::cli_echo("\nWelcome to the \"The Bug Genie\" installation wizard!\n");
				echo "This wizard will take you through the installation of The Bug Genie.\nRemember that you can also install The Bug Genie from your web-browser.\n";
				echo "Simply point your web-browser to the The Bug Genie subdirectory on your web server,\nand the installation will start.\n\n";
				TBGCliCommand::cli_echo("Remember that this is a pre-release version,\nwhich is not yet recommended for production use!\n\n");
				echo "Press ENTER to continue with the installation: ";
				try
				{
					if (strtolower(trim(fgets(STDIN))) != '') throw new Exception();
					
					echo "\n";
					TBGCliCommand::cli_echo("How to support future development\n", 'green', 'bold');
					echo "Even though this software has been provided to you free of charge,\ndeveloping it would not have been possible without support from our users.\n";
					echo "By making a donation, or buying a support contract you can help us continue development.\n\n";
					TBGCliCommand::cli_echo("If this software is valuable to you - please consider supporting it.\n\n");
					echo "More information about supporting The Bug Genie's development can be found here:\n";
					TBGCliCommand::cli_echo("http://www.thebuggenie.com/giving_back.php\n\n", 'blue', 'underline');
					echo "Press ENTER to continue: ";
					
					if (strtolower(trim(fgets(STDIN))) != '') throw new Exception();
					
					echo "\n";
					TBGCliCommand::cli_echo("License information\n", 'green', 'bold');
					echo "This software is Open Source Initiative approved Open Source Software.\nOpen Source Initiative Approved is a trademark of the Open Source Initiative.\n\n";
					echo "True to the the Open Source Definition, The Bug Genie is released\nunder the MPL 1.1 only. You can read the full license here:\n";
					TBGCliCommand::cli_echo("http://www.opensource.org/licenses/mozilla1.1.php\n\n", 'blue', 'underline');
					echo "Before you can continue the installation, you need to confirm that you \nagree to be bound by the terms in this license.\n\n";
					echo "Do you agree to be bound by the terms in the MPL 1.1 license?\n(type \"yes\" to agree, anything else aborts the installation): ";
					
					if (strtolower(trim(fgets(STDIN))) != 'yes') throw new Exception(TBGCliCommand::cli_echo('You need to accept the license to continue', 'red', 'bold'));
					
					$not_well = array();
					if (!is_writable('core/B2DB/'))
					{
						$not_well[] = 'b2db_perm';
					}
					if (!is_writable(TBGContext::getIncludePath()))
					{
						$not_well[] = 'root';
					}
					
					if (count($not_well) > 0)
					{
						echo "\n";
						foreach ($not_well as $afail)
						{
							switch ($afail)
							{
								case 'b2db_perm':
									TBGCliCommand::cli_echo("Could not write to the B2DB directory\n", 'red', 'bold');
									echo 'The ' . TBGCliCommand::cli_echo('include/B2DB') . ' folder needs to be writable';
									break;
								case 'root':
									TBGCliCommand::cli_echo("Could not write to the main directory\n", 'red', 'bold');
									echo 'The top level folder must be writable during installation';
									break;
							}
						}
			
						throw new Exception("\n\nYou need to correct the above errors before the installation can continue.");
					}
					else
					{
						TBGCliCommand::cli_echo("Step 1 - database information\n");
						if (file_exists('core/B2DB/sql_parameters.inc.php'))
						{
							TBGCliCommand::cli_echo("You seem to already have completed this step successfully.\nDo you want to use the stored settings?\n", 'white', 'bold');
							TBGCliCommand::cli_echo("\nType \"no\" to enter new settings, press ENTER to use existing: ", 'white', 'bold');
							$use_existing = strtolower(trim(fgets(STDIN)));
							$use_existing_db_info = ($use_existing == 'no') ? false : true;
							echo "\n";
						}
						else
						{
							$use_existing_db_info = false;
						}
						if (!$use_existing_db_info)
						{
							echo "The Bug Genie uses a database to store information. To be able to connect\nto your database, The Bug Genie needs some information, such as\ndatabase type, username, password, etc.\n\n";
							echo "Please select what kind of database you are installing The Bug Genie on:\n";
							BaseB2DB::setHTMLException(false);
							$db_types = array();
							foreach (BaseB2DB::getDBtypes() as $db_type => $db_desc)
							{
								$db_types[] = $db_type;
								TBGCliCommand::cli_echo(count($db_types) . ': ' . $db_desc . "\n", 'white', 'bold');
							}
							do
							{
								TBGCliCommand::cli_echo('Enter the corresponding number for the database (1-' . count($db_types) . '): ');
								$db_selection = strtolower(trim(fgets(STDIN)));
								if (!isset($db_types[((int) $db_selection - 1)])) throw new Exception($db_selection . ' is not a valid database type selection');
								$db_type = $db_types[((int) $db_selection - 1)];
								echo "Selected database type: " . TBGCliCommand::cli_echo($db_type . "\n\n");
								echo "Please enter the database hostname: \n";
								TBGCliCommand::cli_echo('Database hostname [localhost]: ', 'white', 'bold');
								$db_hostname = trim(fgets(STDIN));
								$db_hostname = ($db_hostname == '') ? 'localhost' : $db_hostname;
								echo "\nPlease enter the username The Bug Genie will use to connect to the database: \n";
								TBGCliCommand::cli_echo('Database username: ', 'white', 'bold');
								$db_username = trim(fgets(STDIN));
								TBGCliCommand::cli_echo("Database password (press ENTER if blank): ", 'white', 'bold');
								$db_password = trim(fgets(STDIN));
								echo "\nPlease enter the database The Bug Genie will use.\nIf it does not exist, The Bug Genie will create it for you.\n(the default database name is ";
								TBGCliCommand::cli_echo("thebuggenie_db", 'white', 'bold');
								echo " - press ENTER to use that):\n";
								TBGCliCommand::cli_echo('Database name: ', 'white', 'bold');
								$db_name = trim(fgets(STDIN));
								$db_name = ($db_name == '') ? 'thebuggenie_db' : $db_name;
								echo "\n";
								echo "The following settings will be used:\n";
								TBGCliCommand::cli_echo("Database type: \t\t", 'white', 'bold') . $db_type . "\n";
								TBGCliCommand::cli_echo("Database hostname: \t", 'white', 'bold') . $db_hostname . "\n";
								TBGCliCommand::cli_echo("Database username: \t", 'white', 'bold') . $db_username . "\n";
								TBGCliCommand::cli_echo("Database password: \t", 'white', 'bold') . $db_password . "\n";
								TBGCliCommand::cli_echo("Database name: \t\t", 'white', 'bold') . $db_name . "\n";
								
								echo "\nIf these settings are ok, press ENTER, or anything else to retry: ";
								
								$e_ok = (strtolower(trim(fgets(STDIN))) == 'no') ? false : true;
							}
							while (!$e_ok);
							try
							{
								BaseB2DB::setHost($db_hostname);
								BaseB2DB::setUname($db_username);
								BaseB2DB::setPasswd($db_password);
								BaseB2DB::setDBtype($db_type);
								BaseB2DB::initialize(true);
								B2DB::doConnect();
								B2DB::createDatabase($db_name);
							}
							catch (Exception $e)
							{
								throw new Exception("Could not connect to the database:\n" . $e->getMessage());
							}
							B2DB::setDBname($db_name);
							B2DB::doSelectDB();
							TBGCliCommand::cli_echo("\nSuccessfully connected to the database.\n", 'green');
							echo "Press ENTER to continue ... ";
							fgets(STDIN);
							echo "\n";
							TBGCliCommand::cli_echo("Saving database connection information ... ", 'white', 'bold');
							echo "\n";
							B2DB::saveConnectionParameters();
							TBGCliCommand::cli_echo("Successfully saved database connection information.\n", 'green');
							echo "\n";
						}
						else
						{
							B2DB::initialize();
							TBGCliCommand::cli_echo("Successfully connected to the database.\n", 'green', '');
							echo "Press ENTER to continue ... ";
							fgets(STDIN);
						}
						echo "\nThe Bug Genie needs some server settings to function properly...\n\n";
						
						do
						{
							TBGCliCommand::cli_echo('URL rewriting', 'cyan', 'bold') . "\n";
							echo "The Bug Genie uses a technique called \"url rewriting\" - which allows for pretty\nURLs such as " . TBGCliCommand::cli_echo('/issue/1', 'white', 'bold') . ' instead of ' . TBGCliCommand::cli_echo('viewissue.php?issue_id=1', 'white', 'bold') . "\n";
							echo "Make sure you have read the URL_REWRITE document located in the root\nfolder, or at http://www.thebuggenie.com before you continue\n";
							echo "Press ENTER to continue ... ";
							fgets(STDIN);
							echo "\n";
							TBGCliCommand::cli_echo('Web server root URL', 'white', 'bold') . "\nThis is the root of the Web server where The Bug Genie will be running\nex: http://bugs.mycompany.com\n";
							echo 'Enter the web URL ' . TBGCliCommand::cli_echo('without', 'white', 'bold') . " any ending slashes\n\n";
							TBGCliCommand::cli_echo('Web server root URL: ', 'white', 'bold');
							$url_host = trim(fgets(STDIN));
							echo "\n";
							
							TBGCliCommand::cli_echo('The Bug Genie subdir', 'white', 'bold') . "\nThis is the sub-path of the Web server where The Bug Genie will be located.\n" . TBGCliCommand::cli_echo('Start and end this with a forward slash', 'white', 'bold') . ". (ex: \"/thebuggenie/\")\nIf The Bug Genie is running at root, just type \"/\" (without the quotes)\n\n";
							TBGCliCommand::cli_echo('The Bug Genie subdir: ', 'white', 'bold');
							$url_subdir = trim(fgets(STDIN));
							echo "\n";
							
							echo "The Bug Genie will now be accessible at\n" . TBGCliCommand::cli_echo($url_host . $url_subdir, 'white', 'bold');
							echo "\nPress ENTER if ok, or \"no\" to try again: ";
							$e_ok = (trim(fgets(STDIN)) == '') ? true : false;
							echo "\n";
						}
						while (!$e_ok);
						
						echo "Setup can autoconfigure your .htaccess file (located in the thebuggenie/ subfolder), so you don't have to.\n";
						TBGCliCommand::cli_echo('Would you like setup to auto-generate the .htaccess file for you?');
						echo "\nPress ENTER if ok, or \"no\" to not set up the .htaccess file: ";
						$htaccess_ok = (trim(fgets(STDIN)) == '') ? true : false;
						echo "\n";

						if ($htaccess_ok)
						{
							if (!is_writable(TBGContext::getIncludePath() . 'thebuggenie/') || (file_exists(TBGContext::getIncludePath() . 'thebuggenie/.htaccess') && !is_writable(TBGContext::getIncludePath() . 'thebuggenie/.htaccess')))
							{
								TBGCliCommand::cli_echo('Permission denied when trying to save the [main folder]/thebuggenie/.htaccess', 'red', 'bold') . "\n";
								TBGCliCommand::cli_echo('You will have to set up the .htaccess file yourself. See the README file for more information.', 'white', 'bold') . "\n";
								TBGCliCommand::cli_echo('Please note: ', 'white', 'bold') . "The Bug Genie will not function properly until the .htaccess file is properly set up!";
							}
							else
							{
								$content = str_replace('###PUT URL SUBDIRECTORY HERE###', $url_subdir, file_get_contents(TBGContext::getIncludePath() . 'thebuggenie/htaccess.template'));
								file_put_contents(TBGContext::getIncludePath() . 'thebuggenie/.htaccess', $content);
								if (file_get_contents(TBGContext::getIncludePath() . 'thebuggenie/.htaccess') != $content)
								{
									TBGCliCommand::cli_echo('Permission denied when trying to save the [main folder]/thebuggenie/.htaccess', 'red', 'bold') . "\n";
									TBGCliCommand::cli_echo('You will have to set up the .htaccess file yourself. See the README file for more information.', 'white', 'bold') . "\n";
									TBGCliCommand::cli_echo('Please note: ', 'white', 'bold') . "The Bug Genie will not function properly until the .htaccess file is properly set up!";
								}
								else
								{
									TBGCliCommand::cli_echo('The .htaccess file was successfully set up...', 'green', 'bold');
									echo "\n";
								}
							}
							
						}
						echo "Press ENTER to continue ... ";
						fgets(STDIN);
						echo "\n";

						echo "You will now get a list of available modules.\nTo enable the module after installation, just press ENTER.\nIf you don't want to enable the module, type \"no\".\nRemember that all these modules can be disabled/uninstalled after installation.\n\n";
						TBGCliCommand::cli_echo("Enable incoming and outgoing email? ", 'white', 'bold') . '(yes): ';
						$enable_modules = array();
						$enable_modules['mailing'] = (trim(fgets(STDIN)) == '') ? true : false;
						TBGCliCommand::cli_echo("Enable internal messaging between users? ", 'white', 'bold') . '(yes): ';
						$enable_modules['messages'] = (trim(fgets(STDIN)) == '') ? true : false;
						TBGCliCommand::cli_echo("Enable calendar? ", 'white', 'bold') . '(yes): ';
						$enable_modules['calendar'] = (trim(fgets(STDIN)) == '') ? true : false;
						TBGCliCommand::cli_echo("Enable SCM integration? ", 'white', 'bold') . '(yes): ';
						$enable_modules['svn_integration'] = (trim(fgets(STDIN)) == '') ? true : false;
						
						$enable_modules['publish'] = true;
						
						echo "Creating tables ...\n";
						$tables_path = THEBUGGENIE_PATH . 'core/classes/B2DB/';
						TBGContext::addClasspath($tables_path);
						$tables_path_handle = opendir($tables_path);
						$tables_created = array();
						while ($table_class_file = readdir($tables_path_handle))
						{
							if (($tablename = substr($table_class_file, 0, strpos($table_class_file, '.'))) != '')
							{
								B2DB::getTable($tablename)->create();
								TBGCliCommand::cli_echo('Creating table '.$tablename, 'white', 'bold');
								echo "\n";
							}
						}
						
						TBGCliCommand::cli_echo("\nAll tables successfully created...\n\n", 'green', 'bold');
						TBGCliCommand::cli_echo("Setting up initial scope... \n", 'white', 'bold');
						TBGContext::reinitializeI18n('en_US');
						$scope = TBGScope::createNew('The default scope', '');
						TBGSettings::saveSetting('language', 'en_US', 'core', 1);
						$scope->setHostname($url_host);
						$scope->save();
						TBGContext::setScope($scope);
						TBGSettings::saveSetting('url_subdir', $url_subdir, 'core', 1);
						TBGCliCommand::cli_echo("Initial scope setup successfully... \n\n", 'green', 'bold');
						
						TBGCliCommand::cli_echo("Setting up modules... \n", 'white', 'bold');
		  				try
		  				{
							foreach ($enable_modules as $module => $install)
							{
								if ((bool) $install && file_exists(TBGContext::getIncludePath() . "modules/{$module}/module"))
								{
									TBGCliCommand::cli_echo("Installing $module... \n", 'white', 'bold');
									TBGContext::addClasspath(TBGContext::getIncludePath() . "modules/{$module}/classes/");
									if (file_exists(TBGContext::getIncludePath() . "modules/{$module}/classes/B2DB/"))
									{
										TBGContext::addClasspath(TBGContext::getIncludePath() . "modules/{$module}/classes/B2DB/");
									}
									$classname = file_get_contents(TBGContext::getIncludePath() . "modules/{$module}/class");
									call_user_func(array($classname, 'install'), 1);
								}
							}

							error_reporting(E_ERROR);
			  				if (file_put_contents(TBGContext::getIncludePath() . 'installed', '2.1, installed ' . date('d.m.Y H:i')) === false)
							{
								TBGCliCommand::cli_echo("Could not create the 'installed' file.\n", 'red', 'bold');
								echo "Please create the file " . TBGCliCommand::cli_echo(TBGContext::getIncludePath() . 'installed', 'white', 'bold') . "\n";
								echo "with the following line inside:\n";
								TBGCliCommand::cli_echo('2.1, installed ' . date('d.m.Y H:i'), 'blue', 'bold');
								echo "\n\n";
								echo "When that is done, please press ENTER to continue ... ";
								fgets(STDIN);
							}

							TBGCliCommand::cli_echo("\nThe installation was completed successfully!\n", 'green', 'bold');
							echo "\nTo use The Bug Genie, access " . $url_host . $url_subdir . "index.php with a web-browser.\n";
							echo "The default username is " . TBGCliCommand::cli_echo('Administrator') . ' and the password is ' . TBGCliCommand::cli_echo('admin');
							TBGCliCommand::cli_echo("\n\nThank you for trying this The Bug Genie test release!\n");
							echo "\nFor support, please visit " . TBGCliCommand::cli_echo('http://www.thebuggenie.com/', 'blue', 'underline');
							echo "\n";
		  				}
						catch (Exception $e)
						{
							throw new Exception("Could not install the $module module:\n" . $e->getMessage());
						}
						
					}
				}
				catch (Exception $e)
				{
					TBGCliCommand::cli_echo("\n\nThe installation was interrupted\n", 'red');
					echo $e->getMessage() . "\n";
				}
				echo "\n";
				break;
			default:
				if (stristr($argv[1], ':') != '')
				{
					$tmpvar = explode(':', $argv[1]);
					$module = $tmpvar[0];
					$command = $tmpvar[1];
					if (isset($module_commands[$module]))
					{
						if (isset($module_commands[$module][$command]))
						{
							call_user_func(array(TBGContext::getModule($module), $module_commands[$module][$command]['function']), $argv);
						}
					}
					else
					{
						TBGCliCommand::cli_echo('Unknown command', 'red', '') . "\n";
					}
				}
				else
				{
					TBGCliCommand::cli_echo('Unknown command', 'red', '') . "\n";
				}
				break;
		}
	}

	return true;
